#--------------------------------------------------------------------
#program::OLED
# @uthor::Nevzat DURMAZ
#   date::09.08.2016
# update::16.05.2024
#version::01.09
#--------------------------------------------------------------------
# we use pins just as out_push_pull, not i2c...
#from pyb import Pin
from pyb import Pin

class OLED():

    def __init__(self, ClkPin='P1', DataPin='P0', i2cAddress = 0x78, numberFormat = 10,
                 textSize = 1 ):
        self.width = 128
        self.height = 64
        self.DataPin = Pin(DataPin, Pin.OUT_PP)
        self.ClkPin = Pin(ClkPin, Pin.OUT_PP)
        self.delayTime = 0.0
        self.oled_x = 0
        self.oled_y = 0
        self.i2cAddress = i2cAddress
        self.numberFormat = numberFormat
        self.textSize = textSize

        self.init_display()
        self.clear()

        self.F6x8 = [
            [0x00, 0x00, 0x00, 0x00, 0x00, 0x00], # sp
            [0x00, 0x00, 0x00, 0x2f, 0x00, 0x00], # !
            [0x00, 0x00, 0x07, 0x00, 0x07, 0x00], # "
            [0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14], # #
            [0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12], # $
            [0x00, 0x62, 0x64, 0x08, 0x13, 0x23], # %
            [0x00, 0x36, 0x49, 0x55, 0x22, 0x50], # &
            [0x00, 0x00, 0x05, 0x03, 0x00, 0x00], # '
            [0x00, 0x00, 0x1c, 0x22, 0x41, 0x00], # (
            [0x00, 0x00, 0x41, 0x22, 0x1c, 0x00], # )
            [0x00, 0x14, 0x08, 0x3E, 0x08, 0x14], # *
            [0x00, 0x08, 0x08, 0x3E, 0x08, 0x08], # +
            [0x00, 0x00, 0x00, 0xA0, 0x60, 0x00], # ,
            [0x00, 0x08, 0x08, 0x08, 0x08, 0x08], # -
            [0x00, 0x00, 0x60, 0x60, 0x00, 0x00], # .
            [0x00, 0x20, 0x10, 0x08, 0x04, 0x02], # /
            [0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E], # 0
            [0x00, 0x00, 0x42, 0x7F, 0x40, 0x00], # 1
            [0x00, 0x42, 0x61, 0x51, 0x49, 0x46], # 2
            [0x00, 0x21, 0x41, 0x45, 0x4B, 0x31], # 3
            [0x00, 0x18, 0x14, 0x12, 0x7F, 0x10], # 4
            [0x00, 0x27, 0x45, 0x45, 0x45, 0x39], # 5
            [0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30], # 6
            [0x00, 0x01, 0x71, 0x09, 0x05, 0x03], # 7
            [0x00, 0x36, 0x49, 0x49, 0x49, 0x36], # 8
            [0x00, 0x06, 0x49, 0x49, 0x29, 0x1E], # 9
            [0x00, 0x00, 0x36, 0x36, 0x00, 0x00], # :
            [0x00, 0x00, 0x56, 0x36, 0x00, 0x00], # ;
            [0x00, 0x08, 0x14, 0x22, 0x41, 0x00], # <
            [0x00, 0x14, 0x14, 0x14, 0x14, 0x14], # =
            [0x00, 0x00, 0x41, 0x22, 0x14, 0x08], # >
            [0x00, 0x02, 0x01, 0x51, 0x09, 0x06], # ?
            [0x00, 0x32, 0x49, 0x59, 0x51, 0x3E], # @
            [0x00, 0x7C, 0x12, 0x11, 0x12, 0x7C], # A
            [0x00, 0x7F, 0x49, 0x49, 0x49, 0x36], # B
            [0x00, 0x3E, 0x41, 0x41, 0x41, 0x22], # C
            [0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C], # D
            [0x00, 0x7F, 0x49, 0x49, 0x49, 0x41], # E
            [0x00, 0x7F, 0x09, 0x09, 0x09, 0x01], # F
            [0x00, 0x3E, 0x41, 0x49, 0x49, 0x7A], # G
            [0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F], # H
            [0x00, 0x00, 0x41, 0x7F, 0x41, 0x00], # I
            [0x00, 0x20, 0x40, 0x41, 0x3F, 0x01], # J
            [0x00, 0x7F, 0x08, 0x14, 0x22, 0x41], # K
            [0x00, 0x7F, 0x40, 0x40, 0x40, 0x40], # L
            [0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F], # M
            [0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F], # N
            [0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E], # O
            [0x00, 0x7F, 0x09, 0x09, 0x09, 0x06], # P
            [0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E], # Q
            [0x00, 0x7F, 0x09, 0x19, 0x29, 0x46], # R
            [0x00, 0x46, 0x49, 0x49, 0x49, 0x31], # S
            [0x00, 0x01, 0x01, 0x7F, 0x01, 0x01], # T
            [0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F], # U
            [0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F], # V
            [0x00, 0x3F, 0x40, 0x38, 0x40, 0x3F], # W
            [0x00, 0x63, 0x14, 0x08, 0x14, 0x63], # X
            [0x00, 0x07, 0x08, 0x70, 0x08, 0x07], # Y
            [0x00, 0x61, 0x51, 0x49, 0x45, 0x43], # Z
            [0x00, 0x00, 0x7F, 0x41, 0x41, 0x00], # [
            [0x00, 0x55, 0x2A, 0x55, 0x2A, 0x55], # 55
            [0x00, 0x00, 0x41, 0x41, 0x7F, 0x00], # ]
            [0x00, 0x04, 0x02, 0x01, 0x02, 0x04], # ^
            [0x00, 0x40, 0x40, 0x40, 0x40, 0x40], # _
            [0x00, 0x00, 0x01, 0x02, 0x04, 0x00], # '
            [0x00, 0x20, 0x54, 0x54, 0x54, 0x78], # a
            [0x00, 0x7F, 0x48, 0x44, 0x44, 0x38], # b
            [0x00, 0x38, 0x44, 0x44, 0x44, 0x20], # c
            [0x00, 0x38, 0x44, 0x44, 0x48, 0x7F], # d
            [0x00, 0x38, 0x54, 0x54, 0x54, 0x18], # e
            [0x00, 0x08, 0x7E, 0x09, 0x01, 0x02], # f
            [0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C], # g
            [0x00, 0x7F, 0x08, 0x04, 0x04, 0x78], # h
            [0x00, 0x00, 0x44, 0x7D, 0x40, 0x00], # i
            [0x00, 0x40, 0x80, 0x84, 0x7D, 0x00], # j
            [0x00, 0x7F, 0x10, 0x28, 0x44, 0x00], # k
            [0x00, 0x00, 0x41, 0x7F, 0x40, 0x00], # l
            [0x00, 0x7C, 0x04, 0x18, 0x04, 0x78], # m
            [0x00, 0x7C, 0x08, 0x04, 0x04, 0x78], # n
            [0x00, 0x38, 0x44, 0x44, 0x44, 0x38], # o
            [0x00, 0xFC, 0x24, 0x24, 0x24, 0x18], # p
            [0x00, 0x18, 0x24, 0x24, 0x18, 0xFC], # q
            [0x00, 0x7C, 0x08, 0x04, 0x04, 0x08], # r
            [0x00, 0x48, 0x54, 0x54, 0x54, 0x20], # s
            [0x00, 0x04, 0x3F, 0x44, 0x40, 0x20], # t
            [0x00, 0x3C, 0x40, 0x40, 0x20, 0x7C], # u
            [0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C], # v
            [0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C], # w
            [0x00, 0x44, 0x28, 0x10, 0x28, 0x44], # x
            [0x00, 0x1C, 0xA0, 0xA0, 0xA0, 0x7C], # y
            [0x00, 0x44, 0x64, 0x54, 0x4C, 0x44], # z
            [0x14, 0x14, 0x14, 0x14, 0x14, 0x14] # horiz lines
        ]

        self.F8X16 = [
            [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00], # 0
            [0x00,0x00,0x00,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x33,0x30,0x00,0x00,0x00], #! 1
            [0x00,0x10,0x0C,0x06,0x10,0x0C,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00], #" 2
            [0x40,0xC0,0x78,0x40,0xC0,0x78,0x40,0x00,0x04,0x3F,0x04,0x04,0x3F,0x04,0x04,0x00], ## 3
            [0x00,0x70,0x88,0xFC,0x08,0x30,0x00,0x00,0x00,0x18,0x20,0xFF,0x21,0x1E,0x00,0x00], #$ 4
            [0xF0,0x08,0xF0,0x00,0xE0,0x18,0x00,0x00,0x00,0x21,0x1C,0x03,0x1E,0x21,0x1E,0x00], #% 5
            [0x00,0xF0,0x08,0x88,0x70,0x00,0x00,0x00,0x1E,0x21,0x23,0x24,0x19,0x27,0x21,0x10], #& 6
            [0x10,0x16,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00], #' 7
            [0x00,0x00,0x00,0xE0,0x18,0x04,0x02,0x00,0x00,0x00,0x00,0x07,0x18,0x20,0x40,0x00], #( 8
            [0x00,0x02,0x04,0x18,0xE0,0x00,0x00,0x00,0x00,0x40,0x20,0x18,0x07,0x00,0x00,0x00], #) 9
            [0x40,0x40,0x80,0xF0,0x80,0x40,0x40,0x00,0x02,0x02,0x01,0x0F,0x01,0x02,0x02,0x00], #* 10
            [0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x1F,0x01,0x01,0x01,0x00], #+ 11
            [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xB0,0x70,0x00,0x00,0x00,0x00,0x00], #, 12
            [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01], #- 13
            [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,0x00,0x00], #. 14
            [0x00,0x00,0x00,0x00,0x80,0x60,0x18,0x04,0x00,0x60,0x18,0x06,0x01,0x00,0x00,0x00], #/ 15
            [0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x0F,0x10,0x20,0x20,0x10,0x0F,0x00], #0 16
            [0x00,0x10,0x10,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00], #1 17
            [0x00,0x70,0x08,0x08,0x08,0x88,0x70,0x00,0x00,0x30,0x28,0x24,0x22,0x21,0x30,0x00], #2 18
            [0x00,0x30,0x08,0x88,0x88,0x48,0x30,0x00,0x00,0x18,0x20,0x20,0x20,0x11,0x0E,0x00], #3 19
            [0x00,0x00,0xC0,0x20,0x10,0xF8,0x00,0x00,0x00,0x07,0x04,0x24,0x24,0x3F,0x24,0x00], #4 20
            [0x00,0xF8,0x08,0x88,0x88,0x08,0x08,0x00,0x00,0x19,0x21,0x20,0x20,0x11,0x0E,0x00], #5 21
            [0x00,0xE0,0x10,0x88,0x88,0x18,0x00,0x00,0x00,0x0F,0x11,0x20,0x20,0x11,0x0E,0x00], #6 22
            [0x00,0x38,0x08,0x08,0xC8,0x38,0x08,0x00,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x00], #7 23
            [0x00,0x70,0x88,0x08,0x08,0x88,0x70,0x00,0x00,0x1C,0x22,0x21,0x21,0x22,0x1C,0x00], #8 24
            [0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x00,0x31,0x22,0x22,0x11,0x0F,0x00], #9 25
            [0x00,0x00,0x00,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00], #: 26
            [0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x60,0x00,0x00,0x00,0x00], #; 27
            [0x00,0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00,0x01,0x02,0x04,0x08,0x10,0x20,0x00], #< 28
            [0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x00,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x00], #= 29
            [0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00,0x00,0x20,0x10,0x08,0x04,0x02,0x01,0x00], #> 30
            [0x00,0x70,0x48,0x08,0x08,0x08,0xF0,0x00,0x00,0x00,0x00,0x30,0x36,0x01,0x00,0x00], #? 31
            [0xC0,0x30,0xC8,0x28,0xE8,0x10,0xE0,0x00,0x07,0x18,0x27,0x24,0x23,0x14,0x0B,0x00], #@ 32
            [0x00,0x00,0xC0,0x38,0xE0,0x00,0x00,0x00,0x20,0x3C,0x23,0x02,0x02,0x27,0x38,0x20], #A 33
            [0x08,0xF8,0x88,0x88,0x88,0x70,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x11,0x0E,0x00], #B 34
            [0xC0,0x30,0x08,0x08,0x08,0x08,0x38,0x00,0x07,0x18,0x20,0x20,0x20,0x10,0x08,0x00], #C 35
            [0x08,0xF8,0x08,0x08,0x08,0x10,0xE0,0x00,0x20,0x3F,0x20,0x20,0x20,0x10,0x0F,0x00], #D 36
            [0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x20,0x23,0x20,0x18,0x00], #E 37
            [0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x00,0x03,0x00,0x00,0x00], #F 38
            [0xC0,0x30,0x08,0x08,0x08,0x38,0x00,0x00,0x07,0x18,0x20,0x20,0x22,0x1E,0x02,0x00], #G 39
            [0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x20,0x3F,0x21,0x01,0x01,0x21,0x3F,0x20], #H 40
            [0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00], #I 41
            [0x00,0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,0x00], #J 42
            [0x08,0xF8,0x88,0xC0,0x28,0x18,0x08,0x00,0x20,0x3F,0x20,0x01,0x26,0x38,0x20,0x00], #K 43
            [0x08,0xF8,0x08,0x00,0x00,0x00,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x20,0x30,0x00], #L 44
            [0x08,0xF8,0xF8,0x00,0xF8,0xF8,0x08,0x00,0x20,0x3F,0x00,0x3F,0x00,0x3F,0x20,0x00], #M 45
            [0x08,0xF8,0x30,0xC0,0x00,0x08,0xF8,0x08,0x20,0x3F,0x20,0x00,0x07,0x18,0x3F,0x00], #N 46
            [0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x10,0x20,0x20,0x20,0x10,0x0F,0x00], #O 47
            [0x08,0xF8,0x08,0x08,0x08,0x08,0xF0,0x00,0x20,0x3F,0x21,0x01,0x01,0x01,0x00,0x00], #P 48
            [0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x18,0x24,0x24,0x38,0x50,0x4F,0x00], #Q 49
            [0x08,0xF8,0x88,0x88,0x88,0x88,0x70,0x00,0x20,0x3F,0x20,0x00,0x03,0x0C,0x30,0x20], #R 50
            [0x00,0x70,0x88,0x08,0x08,0x08,0x38,0x00,0x00,0x38,0x20,0x21,0x21,0x22,0x1C,0x00], #S 51
            [0x18,0x08,0x08,0xF8,0x08,0x08,0x18,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00], #T 52
            [0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00], #U 53
            [0x08,0x78,0x88,0x00,0x00,0xC8,0x38,0x08,0x00,0x00,0x07,0x38,0x0E,0x01,0x00,0x00], #V 54
            [0xF8,0x08,0x00,0xF8,0x00,0x08,0xF8,0x00,0x03,0x3C,0x07,0x00,0x07,0x3C,0x03,0x00], #W 55
            [0x08,0x18,0x68,0x80,0x80,0x68,0x18,0x08,0x20,0x30,0x2C,0x03,0x03,0x2C,0x30,0x20], #X 56
            [0x08,0x38,0xC8,0x00,0xC8,0x38,0x08,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00], #Y 57
            [0x10,0x08,0x08,0x08,0xC8,0x38,0x08,0x00,0x20,0x38,0x26,0x21,0x20,0x20,0x18,0x00], #Z 58
            [0x00,0x00,0x00,0xFE,0x02,0x02,0x02,0x00,0x00,0x00,0x00,0x7F,0x40,0x40,0x40,0x00], #[ 59
            [0x00,0x0C,0x30,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x06,0x38,0xC0,0x00], #\ 60
            [0x00,0x02,0x02,0x02,0xFE,0x00,0x00,0x00,0x00,0x40,0x40,0x40,0x7F,0x00,0x00,0x00], #] 61
            [0x00,0x00,0x04,0x02,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00], #^ 62
            [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80], #_ 63
            [0x00,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00], #` 64
            [0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x19,0x24,0x22,0x22,0x22,0x3F,0x20], #a 65
            [0x08,0xF8,0x00,0x80,0x80,0x00,0x00,0x00,0x00,0x3F,0x11,0x20,0x20,0x11,0x0E,0x00], #b 66
            [0x00,0x00,0x00,0x80,0x80,0x80,0x00,0x00,0x00,0x0E,0x11,0x20,0x20,0x20,0x11,0x00], #c 67
            [0x00,0x00,0x00,0x80,0x80,0x88,0xF8,0x00,0x00,0x0E,0x11,0x20,0x20,0x10,0x3F,0x20], #d 68
            [0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x22,0x22,0x22,0x22,0x13,0x00], #e 69
            [0x00,0x80,0x80,0xF0,0x88,0x88,0x88,0x18,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00], #f 70
            [0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x6B,0x94,0x94,0x94,0x93,0x60,0x00], #g 71
            [0x08,0xF8,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20], #h 72
            [0x00,0x80,0x98,0x98,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00], #i 73
            [0x00,0x00,0x00,0x80,0x98,0x98,0x00,0x00,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00], #j 74
            [0x08,0xF8,0x00,0x00,0x80,0x80,0x80,0x00,0x20,0x3F,0x24,0x02,0x2D,0x30,0x20,0x00], #k 75
            [0x00,0x08,0x08,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00], #l 76
            [0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x20,0x3F,0x20,0x00,0x3F,0x20,0x00,0x3F], #m 77
            [0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20], #n 78
            [0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00], #o 79
            [0x80,0x80,0x00,0x80,0x80,0x00,0x00,0x00,0x80,0xFF,0xA1,0x20,0x20,0x11,0x0E,0x00], #p 80
            [0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x0E,0x11,0x20,0x20,0xA0,0xFF,0x80], #q 81
            [0x80,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x20,0x20,0x3F,0x21,0x20,0x00,0x01,0x00], #r 82
            [0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x33,0x24,0x24,0x24,0x24,0x19,0x00], #s 83
            [0x00,0x80,0x80,0xE0,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x1F,0x20,0x20,0x00,0x00], #t 84
            [0x80,0x80,0x00,0x00,0x00,0x80,0x80,0x00,0x00,0x1F,0x20,0x20,0x20,0x10,0x3F,0x20], #u 85
            [0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x00,0x01,0x0E,0x30,0x08,0x06,0x01,0x00], #v 86
            [0x80,0x80,0x00,0x80,0x00,0x80,0x80,0x80,0x0F,0x30,0x0C,0x03,0x0C,0x30,0x0F,0x00], #w 87
            [0x00,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x31,0x2E,0x0E,0x31,0x20,0x00], #x 88
            [0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x80,0x81,0x8E,0x70,0x18,0x06,0x01,0x00], #y 89
            [0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x21,0x30,0x2C,0x22,0x21,0x30,0x00], #z 90
            [0x00,0x00,0x00,0x00,0x80,0x7C,0x02,0x02,0x00,0x00,0x00,0x00,0x00,0x3F,0x40,0x40], #{ 91
            [0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00], #| 92
            [0x00,0x02,0x02,0x7C,0x80,0x00,0x00,0x00,0x00,0x40,0x40,0x3F,0x00,0x00,0x00,0x00], #} 93
            [0x00,0x06,0x01,0x01,0x02,0x02,0x04,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00], #~ 94
           ]

    def delay(self, delayClkPulse = 1):
        for _ in range(delayClkPulse):
            pass
        #count = delayClkPulse
        #while count:
        #    count -= 1

    def SdaPinState(self, _sta):
        if _sta == True:
            self.DataPin.high()
        else:
            self.DataPin.low()

    def ClkPinState(self, _sta):
        if _sta == True:
            self.ClkPin.high()
        else:
            self.ClkPin.low()

    def start(self):
        self.SdaPinState(True)
        self.ClkPinState(True)
        self.delay()
        self.SdaPinState(False)
        self.delay()
        self.ClkPinState(False)

    def stop(self):
        self.SdaPinState(False)
        self.delay()
        self.ClkPinState(True)
        self.delay()
        self.SdaPinState(True)

    def noAck(self):
        self.delay()
        self.SdaPinState(True)
        self.ClkPinState(True)
        self.delay()
        self.ClkPinState(False)
        self.delay()
        self.SdaPinState(False)
        self.delay()

    def write_byte(self, _data):
        for i in range(8):
            self.SdaPinState(True if _data<<i & 0x80 else False)
            self.delay()
            self.ClkPinState(True)
            self.delay()
            self.ClkPinState(False)
        self.delay()
        self.ClkPinState(True)
        self.delay()
        self.ClkPinState(False)

    def writeByte(self, _addr, _data):
        self.start()
        self.write_byte(self.i2cAddress)
        self.write_byte(_addr)
        self.write_byte(_data)
        self.stop()

    def WriteCmd(self, _cmd):
        self.writeByte(0x00, _cmd)

    def WriteDat(self, _Data):
        self.writeByte(0x40, _Data)

    def fill(self, _fillData):
        for m in range(8):
            self.WriteCmd(0xB0 + m)
            self.WriteCmd(0x00)
            self.WriteCmd(0x10)
            for n in range(128):
                self.WriteDat(_fillData)

    def init_display(self):
        # 128x64 pixel specific initialization.
        self.WriteCmd(0xA8)
        self.WriteCmd(0x3F)
        self.WriteCmd(0xD3)
        self.WriteCmd(0x00)
        self.WriteCmd(0x40)
        self.WriteCmd(0xA1)
        self.WriteCmd(0xC8)
        self.WriteCmd(0xDA)
        self.WriteCmd(0x12)
        self.WriteCmd(0x81)
        self.WriteCmd(0x7F)
        self.WriteCmd(0xA4)
        self.WriteCmd(0xA6)
        self.WriteCmd(0xD5)
        self.WriteCmd(0x80)
        self.WriteCmd(0x8D)
        self.WriteCmd(0x14)
        self.WriteCmd(0xAF)

    def clear(self):
        self.fill(0x00)

    def set_textsize(self, txtsize):
        self.textSize = txtsize

    def setpos(self, x, y):
        self.WriteCmd(0xB0+y)
        self.WriteCmd(((x&0xF0)>>4)|0x10)
        self.WriteCmd((x&0x0F)|0x01)

    def oled_on(self):
        self.WriteCmd(0X8D)
        self.WriteCmd(0X14)
        self.WriteCmd(0XAF)

    def oled_off(self):
        self.WriteCmd(0X8D)
        self.WriteCmd(0X10)
        self.WriteCmd(0XAE)

    def put_pixel_blue(self, x, y):
        temp = 0
        fill = 0
        if y>48:
            y=48
        y=64-y
        temp=y%8
        fill=0x01<<temp
        self.setpos(x, y/8)
        self.WriteDat(fill)

    def del_and_put_pixel_blue(self, x, y_old, y_new):
        temp = 0
        fill = 0
        if y_old>40:
            y_old = 40
        y_old = 64-y_old

        if y_new>40:
            y_new = 40
        y_new = 64-y_new

        y_old /= 8

        if y_old == (y_new/8):
            temp = y_new % 8
            fill = 0x01<<temp

            self.setpos(x, y_old)
            self.WriteDat(fill)
        else:
            self.setpos(x, y_old)
            self.WriteDat(0x00)

            temp = y_new % 8
            fill = 0x01<<temp

            self.setpos(x, y_new/8)
            self.WriteDat(fill)

    def put_char(self, c):
        temp = ord(c) - 32
        if c == '\n':
            self.oled_x=0
            self.oled_y+=1
        elif c == '\r':
            self.oled_x=0
        elif c == '\t':
            self.oled_x+=12
        else:
            if self.textSize == 1:
                if self.oled_x > 120:
                    self.oled_x = 0
                    self.oled_y +=1
                if self.oled_y > 8:
                    self.oled_y=0

                self.setpos(self.oled_x,self.oled_y)
                for i in range(6):
                    self.WriteDat(self.F6x8[temp][i])
                self.oled_x += 6

            elif self.textSize == 2:
                if self.oled_x > 118:
                    self.oled_x = 0
                    self.oled_y += 2

                if self.oled_y > 7:
                    self.oled_y = 0

                self.setpos(self.oled_x, self.oled_y)
                for i in range(8):
                    self.WriteDat(self.F8X16[temp][i])

                self.setpos(self.oled_x, self.oled_y+1)
                for i in range(8):
                    self.WriteDat(self.F8X16[temp][i+8])
                self.oled_x += 8

    def show_string(self, x, y, Str):
        i = 0
        if x>=0:
            self.oled_x=x
        if y>=0:
            self.oled_y=y
        while i < len(Str):
            self.put_char(Str[i])
            i += 1

    def show_string_n_char(self, x, y, Str, n_char):
        i = 0
        if x>=0:
            self.oled_x=x
        if y>=0:
            self.oled_y=y
        while n_char:
            self.put_char(Str[i])
            i+=1
            n_char-=1

    def show_number(self, x, y, lNum):
        ulTmp = int(0)
        ulTmp2 = int(0)
        cBuf = ['']*16
        ii = 0

        if x>=0:
            self.oled_x=x
        if y>=0:
            self.oled_y=y

        if(lNum == 0):
            self.put_char('0')
            return

        if self.numberFormat == 16:
           self.show_string(-1, -1, "0x")
        elif lNum < 0:
            self.put_char('-')
            ulTmp = -lNum
        else:
            ulTmp = lNum

        for i in range(10):
            ulTmp2 = ulTmp % self.numberFormat
            if ulTmp2 > 9:
                cBuf[i] = chr(ulTmp2 - 10 + ord('A'))
            else:
                cBuf[i] = chr(ulTmp2 + ord('0'))

            ulTmp //= self.numberFormat

            if ulTmp == 0:
                ii = i
                break
        for ii in range(ii, -1, -1):
            self.put_char(cBuf[ii])



    def show_number_zero(self, x, y, lNum, zero):
        ulTmp = int(0)
        ulTmp2 = int(0)
        cBuf = ['']*16
        ii = 0

        if x>=0:
            self.oled_x=x
        if y>=0:
            self.oled_y=y

        if(lNum == 0):
            for i in range(zero):
                self.put_char('0')
            return

        if self.numberFormat == 16:
           zero -= 2
           self.show_string(-1, -1, "0x")
        elif lNum < 0:
            zero -= 1
            self.put_char('-')
            ulTmp = -lNum
        else:
            ulTmp = lNum

        for i in range(zero):
            ulTmp2 = ulTmp % self.numberFormat
            if ulTmp2 > 9:
                cBuf[i] = chr(ulTmp2 - 10 + ord('A'))
            else:
                cBuf[i] = chr(ulTmp2 + ord('0'))
            ulTmp //= self.numberFormat

        for i in range(zero-1, -1, -1):
            self.put_char(cBuf[i])


    def show_float(self, x, y, fNum, after_dot):
        lM = int(0)
        cBuf = ['']*32
        j = 0
        k = 0

        if x>=0:
            self.oled_x=x
        if y>=0:
            self.oled_y=y

        if fNum < 0.0:
            fNum = -(fNum)
            self.put_char('-')

        if fNum == 0.0:
            self.show_string(-1, -1, "0.0")
            return

        for k in range(after_dot+1):
            fNum = fNum*10

        lM = int(fNum)

        if (lM % 10) > 4:
            lM += 10

        lM //= 10

        for k in range(after_dot):
            cBuf[j] = chr( (lM % self.numberFormat) + ord('0'))
            lM //= 10
            j += 1

        cBuf[j] = '.'
        j += 1

        if lM == 0:
            cBuf[j] = '0'
            j += 1

        while lM > 0:
            cBuf[j] = chr( (lM % self.numberFormat) + ord('0'))
            lM //= 10
            j += 1

        while j != 0:
            j -= 1
            self.put_char(cBuf[j])

    def draw_bmp(self, x0, y0, x1, y1, BMP):
        j = int(0)
        for y in range((y0/8), (y1/8)):
            self.setpos(x0,y)
            for x in range(x0, x1):
                self.WriteDat(BMP[j])
                j += 1


"""
Num = 53.123

ol = OLED()
ol.set_textsize(1)
ol.show_string(0,1,'Hello World')
ol.set_textsize(2)
while True:
    Num += 0.0001
    ol.show_float(0, 6, Num, 4)
"""
